receivers:
  # https://opentelemetry.io/docs/collector/configuration/
  otlp: # OpenTelemetry Protocol receiver
    protocols:
      grpc: # Accepts gRPC telemetry data
        endpoint: 0.0.0.0:4317  # Listens on all network interfaces, port 4317
      http: # Accepts HTTP telemetry data
        endpoint: 0.0.0.0:4318  # Listens on all network interfaces, port 4318

processors:
  batch: # Batches telemetry data for more efficient processing
    send_batch_size: 10000  # Maximum number of items per batch
    send_batch_max_size: 11000  # Absolute maximum batch size
    timeout: 10s  # Maximum time to wait before sending a batch

  resourcedetection: # Automatically detect and add resource attributes
    detectors: [ env, system ]  # Use environment and system detectors
    timeout: 2s

  signozspanmetrics/delta: # Custom span metrics processor
    # Configures how span metrics are processed and exported
    metrics_exporter: clickhousemetricswrite
    metrics_flush_interval: 60s
    # Defines latency histogram buckets for metrics
    latency_histogram_buckets: [ 100us, 1ms, 2ms, 6ms, 10ms, 50ms, 100ms, 250ms, 500ms, 1000ms, 1400ms, 2000ms, 5s, 10s, 20s, 40s, 60s ]
    dimensions_cache_size: 100000
    aggregation_temporality: AGGREGATION_TEMPORALITY_DELTA
    enable_exp_histogram: true
    # Adds various dimensions to metrics for more detailed tracking
    dimensions:
      - name: service.namespace
        default: default
      - name: deployment.environment
        default: default
      # This is added to ensure the uniqueness of the timeseries
      # Otherwise, identical timeseries produced by multiple replicas of
      # collectors result in incorrect APM metrics
      - name: signoz.collector.id
      - name: service.version
      - name: browser.platform
      - name: browser.mobile
      - name: k8s.cluster.name
      - name: k8s.node.name
      - name: k8s.namespace.name
      - name: host.name
      - name: host.type
      - name: container.name


extensions:
  health_check: # Provides a health check endpoint
    endpoint: 0.0.0.0:13133
  pprof: # Provides profiling information
    endpoint: 0.0.0.0:1777
  zpages:
    endpoint: 0.0.0.0:55679
exporters:
  debug:
    verbosity: basic  # Log basic information

  clickhousetraces: # Exports traces to ClickHouse database
    datasource: tcp://clickhouse:9000/signoz_traces
    low_cardinal_exception_grouping: ${env:LOW_CARDINAL_EXCEPTION_GROUPING}
    use_new_schema: true
    timeout: 30s  # Increase connection timeout
    retry_on_failure:
      enabled: true
      initial_interval: 1s
      max_interval: 30s
      max_elapsed_time: 5m

  clickhousemetricswrite: # Exports metrics to ClickHouse
    endpoint: tcp://clickhouse:9000/signoz_metrics
    resource_to_telemetry_conversion:
      enabled: true

  clickhouselogsexporter: # Exports logs to ClickHouse
    dsn: tcp://clickhouse:9000/signoz_logs
    timeout: 10s
    use_new_schema: true
  # debug: {}
service:
  telemetry:
    logs:
      encoding: json  # Log output in JSON format
    metrics:
      address: 0.0.0.0:8888  # Metrics endpoint

  extensions: # Enable health check and profiling
    - health_check
    - pprof

  pipelines: # Define data processing pipelines
    traces: # Trace processing pipeline
      receivers: [ otlp ]
      processors: [ signozspanmetrics/delta, batch ]
      exporters: [ clickhousetraces, debug ]  # Export traces to ClickHouse

    metrics: # Metrics processing pipeline
      receivers: [ otlp ]
      processors: [ batch ]
      exporters: [ clickhousemetricswrite, debug ]

    logs: # Logs processing pipeline
      receivers: [ otlp ]
      processors: [ batch ]
      exporters: [ clickhouselogsexporter, debug ]
